IOC container
framework
Annotation
dependency injection
loosely coupled code
metadatype
logging
AOP
beanFactory
properties
features of spring
auto wiring
ApplicationContext interface
DAO
server web server and applocation server
DTO
best practises
@Configuration
Java based Configuration
Class class
@Component
AnnotaionConfigApplicationContext
typecast object
@Repository
stereotype annotation
dependencies
Non-Invasive
@ComponentScan
default names 
@PropertySouce
@Service
@Controller
getBean()
Environment
------------------------------------------------------------------------------------------------------------------------



public class Address {}
public class Employee {
private Address address;

public Employee(Address address){
  this.address=address;
 }

public void setAddress(Address address){
  this.address=address;
}
}

public class Tester{
  public static void main(String args[]){
     Address address=new Address();
     address.setHno(1);
     address.setLocality("Netaji Nagar");
     Employee employee=new Employee(address);
     address=employee.getAddress();
     System.out.println(employee.getId());
     System.out.println(employee.getName());
     System.out.println(address.getHno());
     System.out.println(address.getLocality());
   }
}
// Being a a coder we are wiring(association) the objects.
---------------------------------------------------------------------------------------------------------------------

To do autowiring, you can use @Autowired annotation. This annotation allows Spring IoC container to resolve and inject dependencies into your bean. It can be applied to attributes, constructors, setter methods of a bean class. 


package com.infosys.beans;
import org.springframework.stereotype.Component;
@Component
public class Address {
	private int hNo;
	private String locality;
	private String city;
	public int gethNo() {
		return hNo;
	}
	public void sethNo(int hNo) {
		this.hNo = hNo;
	}
	public String getLocality() {
		return locality;
	}
	public void setLocality(String locality) {
		this.locality = locality;
	}
	public String getCity() {
		return city;
	}
	public void setCity(String city) {
		this.city = city;
	}

}


package com.infosys.beans;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component(value="empdetails")
public class Employee {
private int empId;
private String name;
@Autowired
private Address address;


public int getEmpId() {
	return empId;
}
public void setEmpId(int empId) {
	this.empId = empId;
}
public String getName() {
	return name;
}
public void setName(String name) {
	this.name = name;
}
public Address getAddress() {
	return address;
}
public void setAddress(Address address) {
	this.address = address;
}




}


public class Tester {

	public static void main(String[] args) {
	    ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfiguration.class);	
            //Employee employee=new Employee();
       	    Employee employee=context.getBean(Employee.class); // Returning an object/bean of Employee class.
           // Employee employee=(Employee)context.getBean("employee");
           // Employee employee=(Employee)context.getBean("empdetails");
	    Address address=employee.getAddress(); // Dont create an object
	    // during the coding and let IOC container take the responsibility
	    // of creating the Employee object and the Address object
	    address.sethNo(111);
	    address.setLocality("Netaji Nagar");
	    address.setCity("Delhi");
	    employee.setEmpId(1);
	    employee.setName("Juben");
	    System.out.println(employee.getEmpId());
	    System.out.println(employee.getName());
	    System.out.println(address.gethNo());
	    System.out.println(address.getLocality());
	    System.out.println(address.getCity());
	}

}


------------------------------------------------------------------------------------------------------------------
If we dont use the @Autowired to address what will happen
In the below approach Employee is not having any association with Address
and they are identified as seperate beans
public class Tester {

	public static void main(String[] args) {
		ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfiguration.class);	
	    Employee employee=context.getBean(Employee.class);
	    Address address=context.getBean(Address.class);
	  
	    //Address address=employee.getAddress(); // Dont create an object
	    // during the coding and let IOC container take the responsibility
	    // of creating the Employee object and the Address object
	   address.sethNo(111);
	   address.setLocality("Netaji Nagar");
	   address.setCity("Delhi");
	    employee.setEmpId(1);
	    employee.setName("Juben");
	    System.out.println(employee.getEmpId());
	    System.out.println(employee.getName());
	    System.out.println(address.gethNo());
	    System.out.println(address.getLocality());
	    System.out.println(address.getCity());
	}

}
-----------------------------------------------------------------------------------------
If we dont use the @Autowired to address what will happen
we get NullPointerException
public class Tester {

	public static void main(String[] args) {
		ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfiguration.class);	
	    Employee employee=context.getBean(Employee.class);
	    public class Tester {

	public static void main(String[] args) {
		ApplicationContext context=new AnnotationConfigApplicationContext(SpringConfiguration.class);	
	    Employee employee=context.getBean(Employee.class);
	 
	    Address address=employee.getAddress(); // Dont create an object
	    // during the coding and let IOC container take the responsibility
	    // of creating the Employee object and the Address object
	   address.sethNo(111);
	   address.setLocality("Netaji Nagar");
	   address.setCity("Delhi");
	    employee.setEmpId(1);
	    employee.setName("Juben");
	    System.out.println(employee.getEmpId());
	    System.out.println(employee.getName());
	    System.out.println(address.gethNo());
	    System.out.println(address.getLocality());
	    System.out.println(address.getCity());
	}

}
	  
	    //Address address=employee.getAddress(); // Dont create an object
	    // during the coding and let IOC container take the responsibility
	    // of creating the Employee object and the Address object
	   address.sethNo(111);
	   address.setLocality("Netaji Nagar");
	   address.setCity("Delhi");
	    employee.setEmpId(1);
	    employee.setName("Juben");
	    System.out.println(employee.getEmpId());
	    System.out.println(employee.getName());
	    System.out.println(address.gethNo());
	    System.out.println(address.getLocality());
	    System.out.println(address.getCity());
	}

}

In above code, Spring container will perform dependency injection using the Java Reflection API(searching Reflection API in Java).


public interface Interface{}

@Component(value="object1")
public class Class1 implements Interface{}

@Component(value="object2")
public class Class2 implements Interface{}

@Component
public class MyClass{
  @Autowired
  @Qualifier("object2")
  private Interface interface;  //Here the container is confused which object to autowire , is it of Class1 or Class2

----------------------------------------------------------------------------------------------------------------------------------
Autowiring through attribute springdemo6
Autowiring through setter method springdemo7
Autowiring throug constructor springdemo8
---------------------------------

Tester=====>Controller=====>Service====Repository

-------------------------------

https://start.spring.io/

After creating the Spring Boot project with Spring Initializer.
We have to extract project because it is downloaded as zip file. 



package com.infy;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication
public class DemoSpringBootApplication  {
	
	public static void main(String[] args) {
		SpringApplication.run(DemoSpringBootApplication.class, args);
	}
}
--------------------------------------------------------------------------------------------------------------------------
package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
		System.out.println("My spring boot application is up");
	}

}

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.7.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.example</groupId>
	<artifactId>demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>demo</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>

------------------------------------------------------------------------------------------------------------------------
The @SpringBootApplication annotation indicates that it is a configuration class and also triggers auto-configuration and component scanning. It is a combination of the following annotations with their default attributes:

@EnableAutoConfiguration – This annotation enables auto-configuration for Spring Boot application which automatically configures your application based on the dependencies that you have added.

@ComponentScan – This enables Spring bean dependency injection feature by using @Autowired annotation. All application components which are annotated with @Component, @Service, @Repository or @Controller are automatically registered as Spring Beans. These beans can be injected by using @Autowired annotation.

@Configuration – This enables Java based configurations for Spring boot application. 

----------------------------------------------------------------------------------------------------------------------
Spring Boot Runners

package com.example.demo.component;

import org.springframework.stereotype.Component;


@Component
public class HelloWorld {
public void display() {
	System.out.println("Hello World");
}
}


import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import com.example.demo.component.HelloWorld;
import org.springframework.beans.factory.annotation.Autowired;

@SpringBootApplication
public class DemoApplication implements CommandLineRunner{

	@Autowired
	private HelloWorld world;

	public static void main(String[] args) {
 
		SpringApplication.run(DemoApplication.class, args);
		//System.out.println("My spring boot application is up");
	}

	@Override
	public void run(String... args) throws Exception {
	  greet();
		
	}

	private void greet() {
        world.display();	
     }
   
}
package com.example.demo;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

import com.example.demo.component.HelloWorld;
import org.springframework.beans.factory.annotation.Autowired;

@SpringBootApplication
public class DemoApplication implements CommandLineRunner{

	@Autowired
	private HelloWorld world;

	
	public static void main(String[] args) {
 
		SpringApplication.run(DemoApplication.class, args);
		//System.out.println("My spring boot application is up");
	}

	@Override
	public void run(String... args) throws Exception {
	  greet();
	  hello();
		
	}

	private void hello() {
		System.out.println("I am the hello method");
		
	}

	private void greet() {
    world.display();	
		
	}

}

// run is a method of CommandLineRunner interface which we need to override in out Application class if our SpringBootApplication
is implementing the CommandLineRunner. So the run method is basically to start accessing the beans/objects which are part of
Spring boot application. So in our above example we created a class HelloWorld and annotated it with @Component. After that
we autowired that @Component class reference in the Application class so that with that reference we can access the object of the
HelloWorld created by IOC container so that we can call the display method.


As we are implementing CommandLineRunner we have to override the method run of CommandLineRunner.

---------------------------------------------------------------------------------------------------------------------------------
Do we have any other option to create this Spring Boot project without taking the help of the site for Spring Initializer?
Yes we can for that we have incorporate spring tool suite (STS) plugin with eclipse.

How to do that?
Click on Help menu====> Eclipse Marketplace
------------------------------------------------------------------------------------------------------------------
Core Java 
  public class HelloWorld {
     public void display(){
      System.out.println("Hello World");
     }
   }

  public class Application {
     public static void main(String[] args){
       HelloWorld hw=new HelloWorld();
     }
  }

--------------------------------------------------------------------------------------------------------------
Spring Core Java Based

  public class HelloWorld {
     public void display(){
       System.out.println("Hello World");
      }
    }

   @Configuration
   public class SpringConfig{
    @Bean
     public HelloWorld(){
      return new HelloWorld();
     }

   }

  
   public class Application {
     public static void main(String args[]) {

      ApplicationContext context=new AnnotationApplicationContext(SpringConfig.class);
      HelloWorld hw=context.getBean(HelloWorld.class);
      hw.display();
     }
  } 

-----------------------------------------------------------------------

Spring Core Java Annotation based

  package com.infosys.model;
  @Component
  public class HelloWorld {
     public void display(){
       System.out.println("Hello World");
      }
    }

   @Configuration
   @ComponentScan(basePackages="com.infosys.model")
   public class SpringConfig{


   }

  
   public class Application {
     public static void main(String args[]) {

      ApplicationContext context=new AnnotationApplicationContext(SpringConfig.class);
      HelloWorld hw=context.getBean(HelloWorld.class);
      hw.display();
     }
  } 

------------------------------------------------------------------------------------------------------------------
 package com.infosys.model;
  @Component
  public class HelloWorld {
     public void display(){
       System.out.println("Hello World");
      }
    }

  

   @SpringBootApplication
   public class Application implements CommandLineRunner {
     @Autowired
     private HelloWorld hw;
     public static void main(String ... args) {  //vargs ( variable number of arguements
       SpringApplication.run(Application.class,args);
     
     }

    public void run(String ... args){
       //  hw.display(); 
         greet();
      }

    private void greet(){
       hw.display();
    }

  } 

I am writing any ComponentScan so how the container will know that where these classes which are annotated with @Component,@Repository,@Service and @Controller are present ?
A it always look for the package where the Application class is and to the sub-packages of the package where Application class is.
-------------------------------------------------------------------------------------------------------------------------------
1) You will create a Spring Boot project with Spring Initializer ( Which is web based) or we will will go for installing the 
   plugin for STS alongwith Eclipse IDE so that we can create Spring Starter Project.
2) pom.xml is getting created with some default dependencies.
3) The confguration related class we dont have to create.
4) We need to go for creating an object IOC container.
--------------------------------------------------------------------------------------------------------------------------------------
How to read properties from propertied file?
A We need to have Environment object.

      Environment env=context.getEnvironment();

But in Spring Boot we are not having any ApplicationContext object. So how we will get this Environment object.
A We will autowire the Environment object.
-------------------------------------------------------------------------------------------------------------------------------
Level	Description
ALL	All levels including custom levels.
DEBUG	Designates fine-grained informational events that are most useful to debug an application.
INFO	Designates informational messages that highlight the progress of the application at coarse-grained level.
WARN	Designates potentially harmful situations.
ERROR	Designates error events that might still allow the application to continue running.
FATAL	Designates very severe error events that will presumably lead the application to abort.
OFF	The highest possible rank and is intended to turn off logging.
TRACE	Designates finer-grained informational events than the DEBUG.

How do Levels Works?
A log request of level p in a logger with level q is enabled if p >= q. This rule is at the heart of log4j. It assumes that levels are ordered. For the standard levels, we have ALL < DEBUG < INFO < WARN < ERROR < FATAL < OFF.
---------------------------------------------------------------------------------------------------------------------------
I understood the setting of Level and understood that if the level is set to INFO then I can login for info,error,fatal etc.

How to set this LEVEL or WHERE to set this LEVEL?
Currently we will do it in the application.properties file. 

# Logging Level
logging.level.com.infy.service=ERROR
logging.level.com.infy=INFO

# Logging pattern for the console
logging.pattern.console=%d{yyyy-MMM-dd HH:mm:ss a} [%t] %-5level %logger{36} - %msg%n

# Logging pattern for file
logging.pattern.file=%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n

# Logging File
logging.file.name=logs/Error.log
#logging.file.path=logs/Error.log


-----------------------------------------------------------------------------------------------------------
https://logging.apache.org/log4j/1.2/manual.html
